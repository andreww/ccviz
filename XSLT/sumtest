<?xml version="1.0" encoding="UTF-8" ?>
<xsl:stylesheet version="1.0"
        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        xmlns="http://www.w3.org/1999/xhtml"
        xmlns:exsl="http://exslt.org/common"
        xmlns:cml="http://www.xml-cml.org/schema"
        extension-element-prefixes="exsl"
        >

  <xsl:import href="graph_bits.xsl"/>
  
  <xsl:template name="summaryGraphs">
    <div class="listTitle">Graphs by timestep</div>
    <table class="graph">
    <xsl:variable name="steps" select="/cml:cml/cml:module[@role='step']">
    <!-- find all properties that are output in both first and last steps: -->
    <xsl:variable name="properties">
      <xsl:for-each select="$steps[position()=1]/cml:propertyList/cml:property">
        <xsl:variable name="dictRef" value="@dictRef"/>
        <xsl:if test="$steps[position()=last()]/cml:propertyList/cml:property[@dictRef=$dictRef]">
          <cml:property name="$dictRef"/>
	</xsl:if>
      </xsl:for-each>
    </xsl:variable>
    <xsl:for-each select="/cml:cml/cml:module[@role='step' and position()=1]/cml:propertyList/cml:property">
    <!-- check for all properties in the first step -->
      <xsl:message><xsl:value-of select="@dictRef"/></xsl:message>
      <xsl:variable name="dictRef" value="@dictRef"/>
      <!-- if this property is a numerical scalar (FIXME might want broader dataType check below) -->
      <xsl:if test="cml:scalar/@dataType = 'xsd:integer' or cml:scalar/@dataType = 'xsd:float' or cml:scalar/@dataType = 'xsd:double'">
        <!-- and if this property appears at least on the first & last steps (FIXME might want at least one more) -->
        <xsl:if test="/cml:cml/cml:module[@role='step' and position()=last()]/cml:propertyList/cml:property[@dictRef=$dictRef]">
	  <!-- maybe should do all this checking elsewhere, like in the module logic -->
          <xsl:variable name="units" select="cml:scalar/@units"/>
	  <xsl:variable name="dictName">
	    <xsl:call-template name="get.dictionary.reference.html">
	      <xsl:with-param name="dictRef" select="@dictRef"/>
	      <xsl:with-param name="title" select="@title"/>
	    </xsl:call-template>
	  </xsl:variable>
          <xsl:variable name="graphId" select="generate-id()"/>
          <xsl:variable name="graphNodeSet">
	    <xsl:call-template name="selectNestedGraphNodes">
	      <xsl:with-param name="stepType" select="'MD step'"/>
	      <xsl:with-param name="propertyName" select="@dictRef"/>
	    </xsl:call-template>
	  </xsl:variable>
	  <xsl:variable name="graph">
	    <xsl:call-template name="drawGraph">
	      <xsl:with-param name="graphTitle" select="$dictName"/>
	      <xsl:with-param name="xAxisTitle" select="'Step'"/>
	      <xsl:with-param name="yAxisTitle" select="$units"/>
	      <xsl:with-param name="pointSet" select="exsl:node-set($graphNodeSet)"/>
            </xsl:call-template> 
          </xsl:variable>
          <tr class="graph">
	    <td class="graph"><xsl:value-of select="$dictName"/>:</td>
            <td class="graph"><input type="button" value="Show" onclick="js:toggleButton(this, &quot;{$graphId}&quot;)"/></td><br/>
	    <div style="display:none;" id="{$graphId}"><xsl:copy-of select="$graph"/></div>
	  </tr>
	</xsl:if>
      </xsl:if>
    </xsl:for-each>
  </table>
  </xsl:template>
</xsl:stylesheet>
  
